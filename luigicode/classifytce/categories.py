# This script contains all the regular expressions that assist classification of errata.

import re

categories = {'ctx_CFG_sgc': {
    'question': 'Does triggering require running a single core?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'single\s*core', re.IGNORECASE | re.DOTALL),
        (r'one\s*core', re.IGNORECASE | re.DOTALL),
        (r'1\s*core', re.IGNORECASE | re.DOTALL),
        (r'unique\s*core', re.IGNORECASE | re.DOTALL)
    ],
    'regexes_to_highlight': [],
},
    'ctx_FEA_sec': {
    'question': 'Does triggering require the usage of security features such as SGX?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'TXT', re.DOTALL),
        (r'SGX', re.DOTALL),
        (r'SNP', re.DOTALL),
        (r'SMEP', re.DOTALL),
        (r'SMAP', re.DOTALL),
        (r'SME', re.DOTALL),
        (r'SVM', re.DOTALL),
        (r'\bsats', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'secur', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'ctx_PHY_pkg': {
    'question': 'Does triggering require a certain package?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [
        (r'\bP\s*-?\s*state', re.DOTALL),
        (r'(?<!package )\s*\bC\s*\d', re.IGNORECASE | re.DOTALL),
        (r'C\s*C\s*\d', re.DOTALL),
        (r'C\s*-?\s*state', re.IGNORECASE | re.DOTALL),
        (r'core\s*(?:state)?\s*C\s*\d', re.IGNORECASE | re.DOTALL),
        (r'core\s*state', re.IGNORECASE | re.DOTALL)
    ],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'package', re.IGNORECASE | re.DOTALL)
    ],
    'regexes_to_highlight': [],
},
    'ctx_PHY_tmp': {
    'question': 'Does triggering require specific temperature conditions?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\bthermal\b', re.IGNORECASE | re.DOTALL),
        (r'\btemperature\b', re.IGNORECASE | re.DOTALL),
        (r'\bcelsius\b', re.IGNORECASE | re.DOTALL),
        (r'\bkelvin\b', re.IGNORECASE | re.DOTALL),
        (r'\bfahrenheit\b', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [],
    'regexes_to_highlight': [],
},
    'ctx_PHY_vol': {
    'question': 'Does triggering require a certain voltage?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'\w*volt\w*', re.IGNORECASE | re.DOTALL)
    ],
    'regexes_to_highlight': [],
},
    'ctx_PRV_boo': {
    'question': 'Does triggering require to be booting or in BIOS?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [
    ],
    'regexes_and_flags_certain': [
        (r'\bboot', re.IGNORECASE | re.DOTALL),
        (r'\bbist', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'BIOS', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [r'fail\w*', r'initial\w*'],
},
    'ctx_PRV_smm': {
    'question': 'Does triggering require to be in SMM?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'from\s*SMM\b', re.IGNORECASE | re.DOTALL),
        (r'in\s*SMM\b', re.IGNORECASE | re.DOTALL),
        (r'from\s*system\s*-?\s*management\s*-?\s*mode', re.IGNORECASE | re.DOTALL),
        (r'in\s*system\s*-?\s*management\s*-?\s*mode', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'SMM', re.DOTALL),
        (r'system\s*-?\s*management', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [r'exit', r'resum'],
},
    'ctx_PRV_vmg': {
    'question': 'Does triggering require to be a virtual machine guest?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [
        (r'host\s*controll', re.IGNORECASE | re.DOTALL),
        (r'\bIOMMU', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_certain': [
        (r'\bnested', re.IGNORECASE | re.DOTALL),
        (r'\bnesting', re.IGNORECASE | re.DOTALL),
        (r'vm\s*-?\s*exit', re.IGNORECASE | re.DOTALL),
        (r'guest\s*-?\s*physical', re.IGNORECASE | re.DOTALL),
        (r'VMX\s*-?\s*non\s*-?\s*root', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'guest', re.IGNORECASE | re.DOTALL),
        (r'hypervisor', re.IGNORECASE | re.DOTALL),
        (r'host', re.IGNORECASE | re.DOTALL),
        (r'\bVMX', re.DOTALL),
        (r'\bVME', re.DOTALL),
        (r'\bSNP', re.DOTALL),
        (r'\bSEV', re.DOTALL)
    ],
    'regexes_to_highlight': [],
},
    'ctx_PRV_vmh': {
    'question': 'Does triggering require to be a virtual machine hypervisor?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [
        (r'pcie', re.IGNORECASE | re.DOTALL),
        (r'\bIOMMU', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_certain': [
        (r'VMX\s*-?\s*root', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'VMX', re.IGNORECASE | re.DOTALL),
        (r'hypervisor', re.IGNORECASE | re.DOTALL),
        (r'host', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'eff_CRP_prf': {
    'question': 'Can the bug cause a wrong performance counter?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'APERF', re.DOTALL),
        (r'\bperfmon', re.IGNORECASE | re.DOTALL),
        (r'\bperformance\s*counter', re.IGNORECASE | re.DOTALL),
        (r'\bperformance\s*monitor', re.IGNORECASE | re.DOTALL),
        (r'perf_', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [],
    'regexes_to_highlight': [],
},
    'eff_CRP_reg': {
    'question': 'Can the bug cause a wrong MSR value to be observed (this excludes performance counters)?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [
        (r'APERF', re.DOTALL),
        (r'(?:IA32_)?PERF_CTL', re.DOTALL),
        (r'(?:IA32_)?PERF_FIXED_CTR_CTRL', re.DOTALL),
        (r'(?:IA32_)?PERF_GLOBAL_CTRL', re.DOTALL),
        (r'(?:IA32_)?PERF_GLOBAL_STATUS', re.DOTALL),
        (r'(?:IA32_)?PERF_GLOBAL_STATUS_SET', re.DOTALL),
        (r'MSR_PERF_GLOBAL_STATUS', re.DOTALL),
        (r'MSR_PERF_STATUS', re.DOTALL),
        (r'MSR_UNC_PERF_FIXED_CTR', re.DOTALL),
        (r'MSR_UNC_PERF_FIXED_CTRL', re.DOTALL),
        (r'MSR_UNC_PERF_GLOBAL_CTRL', re.DOTALL),
        (r'MSR_UNC_PERF_GLOBAL_STATUS', re.DOTALL),
        (r'RING_PERF_LIMIT_REASONS', re.DOTALL),
        (r'\bperfmon', re.IGNORECASE | re.DOTALL),
        (r'\bperformance\s*counter', re.IGNORECASE | re.DOTALL),
        (r'\bperformance\s*monitor', re.IGNORECASE | re.DOTALL),
        (r'\bperf_', re.IGNORECASE | re.DOTALL),
        (r'\bperf_', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'(?:IA32_)?MC(?:\d+|\{[\d -]+\}|[a-z])?_STATUS', re.DOTALL),
        (r'\bMSR[\w\d]*', re.DOTALL),
        (r'\bCSR*', re.DOTALL),
        (r'\bIA32_[\w\d]*', re.IGNORECASE | re.DOTALL),
        (r'BR_INST_RETIRED', re.DOTALL),
        (r'(?:IA32_)?APERF', re.DOTALL),
        (r'(?:IA32_)?A_PMC(?:\d+|\{[\d -]+\}|[a-z])?', re.DOTALL),
        (r'(?:IA32_)?BIOS_UPDT_TRIG', re.DOTALL),
        (r'(?:IA32_)?CLOCK_MODULATION', re.DOTALL),
        (r'(?:IA32_)?CR_MC2_STATUS', re.DOTALL),
        (r'(?:IA32_)?CR_PAT', re.DOTALL),
        (r'(?:IA32_)?DEBUGCTL', re.DOTALL),
        (r'(?:IA32_)?EFER', re.DOTALL),
        (r'(?:IA32_)?ENERGY_PERF_BIAS', re.DOTALL),
        (r'(?:IA32_)?EXT_XAPIC_TPR', re.DOTALL),
        (r'(?:IA32_)?FIXED_CTR0', re.DOTALL),
        (r'(?:IA32_)?FIXED_CTR1', re.DOTALL),
        (r'(?:IA32_)?FIXED_CTR2', re.DOTALL),
        (r'(?:IA32_)?FIXED_CTR_CTRL', re.DOTALL),
        (r'(?:IA32_)?HWP_CAPABILITIES', re.DOTALL),
        (r'(?:IA32_)?HWP_STATUS', re.DOTALL),
        (r'(?:IA32_)?MC(?:\d+|\{[\d -]+\}|[a-z])?_STATUS', re.DOTALL),
        (r'(?:IA32_)?MC(?:\d+|\{[\d -]+\}|[a-z])?_ADDR', re.DOTALL),
        (r'(?:IA32_)?MC(?:\d+|\{[\d -]+\}|[a-z])?_CTL\d+', re.DOTALL),
        (r'(?:IA32_)?MCG_STATUS', re.DOTALL),
        (r'(?:IA32_)?MISC_ENABLE', re.DOTALL),
        (r'(?:IA32_)?MPERF', re.DOTALL),
        (r'(?:IA32_)?PEBS_ENABLE', re.DOTALL),
        (r'(?:IA32_)?PMC\d+', re.DOTALL),
        (r'(?:IA32_)?PREFEVTSEL\d+', re.DOTALL),
        (r'(?:IA32_)?RTIT_CR3_MATCH', re.DOTALL),
        (r'(?:IA32_)?RTIT_CTL', re.DOTALL),
        (r'(?:IA32_)?RTIT_OUTPUT_MASK_PTRS', re.DOTALL),
        (r'(?:IA32_)?RTIT_STATUS', re.DOTALL),
        (r'(?:IA32_)?THERM_STATUS', re.DOTALL),
        (r'(?:IA32_)?TSC_ADJUST', re.DOTALL),
        (r'(?:IA32_)?TSC_DEADLINE', re.DOTALL),
        (r'(?:IA32_)?VMX_ENTRY_CTLS', re.DOTALL),
        (r'(?:IA32_)?VMX_PROCBASED_CTLS2', re.DOTALL),
        (r'(?:IA32_)?VMX_VMCS_ENUM', re.DOTALL),
        (r'MSR_LASTBRANCH_?(?:\d+|\{[\d -]+\}|[a-z])?_FROM_IP', re.DOTALL),
        (r'MSR_LASTBRANCH_?(?:\d+|\{[\d -]+\}|[a-z])?_TO_IP', re.DOTALL),
        (r'MSR_LASTBRANCH', re.DOTALL),
        (r'MSR_LASTINT_FROM_IP', re.DOTALL),
        (r'MSR_LASTINT_TO_IP', re.DOTALL),
        (r'MSR_LER_FROM_LIP', re.DOTALL),
        (r'MSR_LER_TO_LIP', re.DOTALL),
        (r'MSR_OFFCORE_RSP_0', re.DOTALL),
        (r'MSR_OFFCORE_RSP_1', re.DOTALL),
        (r'MSR_PP1_ENERGY_STATUS', re.DOTALL),
        (r'MSR_TURBO_RATIO_LIMIT', re.DOTALL),
        (r'MSR_UNC_CBO_CONFIG', re.DOTALL),
        (r'OFFCORE_RSP_0', re.DOTALL),
        (r'PLATFORM_POWER_LIMIT', re.DOTALL),
        (r'TSX_FORCE_ABORT', re.DOTALL),
        (r'VLW_CAPABILITY', re.DOTALL),
        (r'\bCR\d', re.DOTALL),
        (r'\bCS\b', re.DOTALL),
        (r'\bDS\b', re.DOTALL),
        (r'\bES\b', re.DOTALL),
        (r'\bFS\b', re.DOTALL),
        (r'\bGS\b', re.DOTALL),
        (r'\bSS\b', re.DOTALL),
        (r'\bLSL\b', re.DOTALL),
        (r'\bTSS\b', re.DOTALL),
        (r'\bregister', re.IGNORECASE | re.DOTALL),
        (r'\bDR\d', re.IGNORECASE | re.DOTALL),
        (r'\breport', re.IGNORECASE | re.DOTALL),
        (r'with\s*incorrect', re.IGNORECASE | re.DOTALL),
        (r'set\s*incorrect', re.IGNORECASE | re.DOTALL),
        (r'contain\s*incorrect', re.IGNORECASE | re.DOTALL),
        (r'flag', re.IGNORECASE | re.DOTALL),
        (r'TSC', re.IGNORECASE | re.DOTALL),
        (r'time\s*stamp', re.IGNORECASE | re.DOTALL),
        (r'incorrect.*MSR', re.IGNORECASE | re.DOTALL),
        (r'MSR.*incorrect', re.IGNORECASE | re.DOTALL),
        (r'register.*incorrect', re.IGNORECASE | re.DOTALL),
        (r'incorrect.*register', re.IGNORECASE | re.DOTALL),
        (r'incorrect\s*value', re.IGNORECASE | re.DOTALL),
        (r'observe', re.IGNORECASE | re.DOTALL),
        (r'counted', re.IGNORECASE | re.DOTALL),
        (r'fail.*to\s*clear', re.IGNORECASE | re.DOTALL),
        (r'fail.*to\s*set', re.IGNORECASE | re.DOTALL),
        (r'\blogg', re.IGNORECASE | re.DOTALL),
        (r'\blose', re.IGNORECASE | re.DOTALL),
        (r'\blosing', re.IGNORECASE | re.DOTALL),
        (r'\blost', re.IGNORECASE | re.DOTALL),
        (r'\bcleared', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [r'\w*MSR\w*', r'exception', r'interrupt', r'fault', r'PMI'],
},
    'eff_EXT_mmd': {
    'question': 'Can the bug cause a visible effect on power consumption?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'graphi', re.DOTALL),
        (r'audio', re.DOTALL),
        (r'video', re.DOTALL),
    ],
    'regexes_and_flags_prompt': [],
    'regexes_to_highlight': [],
},
    'eff_EXT_pci': {
    'question': 'Can the bug cause a visible effect on the PCIe side?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\bPCIe?', re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
    ],
    'regexes_to_highlight': [],
},
    'eff_EXT_pow': {
    'question': 'Can the bug cause a visible effect on power consumption?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\bpower', re.DOTALL),
        (r'\bconsum', re.DOTALL),
    ],
    'regexes_and_flags_prompt': [],
    'regexes_to_highlight': [],
},
    'eff_EXT_ram': {
    'question': 'Can the bug cause a visible effect on the DRAM side?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'\bDDR', re.DOTALL),
        (r'DRAM', re.DOTALL),
        (r'DIMM', re.DOTALL),
        (r'precharge', re.IGNORECASE | re.DOTALL),
        (r'self.*refresh', re.IGNORECASE | re.DOTALL),
        (r'memory.*rank', re.IGNORECASE | re.DOTALL),
        (r'memory.*bank', re.IGNORECASE | re.DOTALL),
        (r'memory\s*controller', re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'eff_EXT_usb': {
    'question': 'Can the bug cause a visible effect on the USB side?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\bUSB', re.DOTALL),
        (r'\bType\s*-?\s*[A-Z]', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [],
    'regexes_to_highlight': [],
},
    'eff_FLT_fid': {
    'question': 'Can the bug cause a wrong fault ID or order?',
    'regexes_and_flags_require': [
        (r'\#', re.IGNORECASE | re.DOTALL),
        (r'#', re.IGNORECASE | re.DOTALL),
        (r'exception', re.IGNORECASE | re.DOTALL),
        (r'interrupt', re.IGNORECASE | re.DOTALL),
        (r'fault', re.IGNORECASE | re.DOTALL),
        (r'PMI', re.IGNORECASE | re.DOTALL),
        (r'SMI', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'\berror\s*code', re.IGNORECASE | re.DOTALL),
        (r'\bdelay', re.IGNORECASE | re.DOTALL),
        (r'\bpreempt', re.IGNORECASE | re.DOTALL),
        (r'\binstead', re.IGNORECASE | re.DOTALL),
        (r'\bbefore', re.IGNORECASE | re.DOTALL),
        (r'\bafter', re.IGNORECASE | re.DOTALL),
        (r'\border', re.IGNORECASE | re.DOTALL),
        (r'\btype', re.IGNORECASE | re.DOTALL),
        (r'\breport', re.IGNORECASE | re.DOTALL),
        (r'priorit\w*', re.IGNORECASE | re.DOTALL),
        (r'\b(?:un)?expect', re.IGNORECASE | re.DOTALL),
        (r'\bearlier', re.IGNORECASE | re.DOTALL),
        (r'\bafter', re.IGNORECASE | re.DOTALL),
        (r'\blate', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [r'\#\w*', r'exception', r'interrupt', r'fault', r'PMI', r'\w*preemp\w*'],
},
    'eff_FLT_fms': {
    'question': 'Can the bug cause a fault to not appear?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
    ],
    'regexes_and_flags_prompt': [
        (r'\bmissi\w*', re.IGNORECASE | re.DOTALL),
        (r'\bnot\s*see', re.IGNORECASE | re.DOTALL),
        (r'visible', re.IGNORECASE | re.DOTALL),
        (r'signal', re.IGNORECASE | re.DOTALL),
        (r'instead', re.IGNORECASE | re.DOTALL),
        (r'fault', re.IGNORECASE | re.DOTALL),
        (r'exception', re.IGNORECASE | re.DOTALL),
        (r'deliver\w*', re.IGNORECASE | re.DOTALL),
        (r'interrupt', re.IGNORECASE | re.DOTALL),
        (r'\bexpect\w*', re.IGNORECASE | re.DOTALL),
        (r'#\w*', re.IGNORECASE | re.DOTALL),
        (r'\#\w*', re.IGNORECASE | re.DOTALL),
        (r'\bviolat', re.IGNORECASE | re.DOTALL),
        (r'discard', re.IGNORECASE | re.DOTALL),
        (r'fail.*detected', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [r'\#\w*', r'exception', r'interrupt', r'fault', r'PMI', r'\w*expect\w*'],
},
    'eff_FLT_fsp': {
    'question': 'Can the bug cause a spurious exception?',
    'regexes_and_flags_require': [
        (r'\#', re.IGNORECASE | re.DOTALL),
        (r'exception', re.IGNORECASE | re.DOTALL),
        (r'interrupt', re.IGNORECASE | re.DOTALL),
        (r'fault', re.IGNORECASE | re.DOTALL),
        (r'PMI', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'\binfinite', re.IGNORECASE | re.DOTALL),
        (r'\btwice', re.IGNORECASE | re.DOTALL),
        (r'\btwo', re.IGNORECASE | re.DOTALL),
        (r'\bspurious', re.IGNORECASE | re.DOTALL),
        (r'\bsignal', re.IGNORECASE | re.DOTALL),
        (r'\bmultiple', re.IGNORECASE | re.DOTALL),
        (r'\b(?:un)?expect', re.IGNORECASE | re.DOTALL),
        (r'\bincorrect\b', re.IGNORECASE | re.DOTALL),
        (r'\bduplicate\b', re.IGNORECASE | re.DOTALL),
        (r'instead', re.IGNORECASE | re.DOTALL),
        (r'\bincurs?\b', re.IGNORECASE | re.DOTALL),
        (r'\bmask', re.IGNORECASE | re.DOTALL),
        (r'\bcause', re.IGNORECASE | re.DOTALL),
        (r'\bviolat', re.IGNORECASE | re.DOTALL),
        (r'\bnot\s+gener', re.IGNORECASE | re.DOTALL),
        (r'generat', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [r'\#\w*', r'exception', r'interrupt', r'fault', r'PMI'],
},
    'eff_FLT_mca': {
    'question': 'Can the bug cause a machine check exception?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'\bmachine\s*check', re.IGNORECASE | re.DOTALL),
        (r'\bMCA', re.DOTALL),
        (r'\berror', re.DOTALL),
        (r'\bparity', re.DOTALL),
        (r'\bviolat', re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'eff_FLT_unc': {
    'question': 'Can the bug cause an uncorrectable error?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\buncorrectabl', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [],
    'regexes_to_highlight': [],
},
    'eff_HNG_boo': {
    'question': 'Can the bug cause a boot failure?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'fail.*boot', re.IGNORECASE | re.DOTALL),
        (r'boot.*fail', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [],
    'regexes_to_highlight': [],
},
    'eff_HNG_crh': {
    'question': 'Can the bug cause a crash?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'\bcrash', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'eff_HNG_hng': {
    'question': 'Can the bug cause a hang?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\bhang', re.IGNORECASE | re.DOTALL),
        (r'\bunresponsive', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [],
    'regexes_to_highlight': [],
},
    'eff_HNG_unp': {
    'question': 'Can the bug cause unpredictable behavior?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\bunpredictab', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'\bundefined', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_CFG_pag': {
    'question': 'Does triggering require interacting with the page structure configuration?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [
        (r'IOMMU', re.DOTALL),
        (r'IOTLB', re.DOTALL),
    ],
    'regexes_and_flags_certain': [
        (r'\bEPT\b', re.DOTALL),
        (r'\bpag.*struct', re.IGNORECASE | re.DOTALL),
        (r'\bINVLPG', re.DOTALL),
        (r'\bINVVP', re.DOTALL),
        (r'\bchang.*memor.*type', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'tlb', re.IGNORECASE | re.DOTALL),
        (r'\bunmap', re.IGNORECASE | re.DOTALL),
        (r'\bpag.*size', re.IGNORECASE | re.DOTALL),
        (r'\bpag.*table', re.IGNORECASE | re.DOTALL),
        (r'\binvalida', re.IGNORECASE | re.DOTALL),
        (r'PAT', re.DOTALL),
        (r'CR3', re.DOTALL),
        (r'dirty', re.IGNORECASE | re.DOTALL),
        (r'accesses.*bit', re.IGNORECASE | re.DOTALL),
        (r'updat.*translat', re.IGNORECASE | re.DOTALL),
        (r'translat.*updat', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [r'\bpag\w*', r'\btable\w', r'transla\w*'],
},
    'trg_CFG_vmc': {
    'question': 'Does triggering require interacting with the VMC?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [
    ],
    'regexes_and_flags_certain': [
        (r'\bVMC', re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
    ],
    'regexes_to_highlight': [],
},
    'trg_CFG_wrg': {
    'question': 'Does triggering require interacting with MSRs?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [
    ],
    'regexes_and_flags_certain': [
        (r'\bwriting.*[A-Z_0-9]{3,}', re.IGNORECASE | re.DOTALL),
        (r'\breading.*[A-Z_0-9]{3,}', re.IGNORECASE | re.DOTALL),
        (r'WRMSR', re.DOTALL),
        (r'RDMSR', re.DOTALL),
        (r'setting.*[A-Z_0-9]{3,}', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'MSR', re.DOTALL),
        (r'IA32', re.DOTALL),
        (r'\bcause', re.IGNORECASE | re.DOTALL),
        (r'Register.*?\[', re.IGNORECASE | re.DOTALL),
        (r'register.*?access', re.IGNORECASE | re.DOTALL),
        (r'access.*?register', re.IGNORECASE | re.DOTALL),
        (r'misconfigur', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [r'\bpag\w*', r'\btable\w*', r'transla\w*'],
},
    'trg_EXT_bus': {
    'question': 'Does triggering involve a wrong transaction in the system bus?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'HyperTransport', re.IGNORECASE | re.DOTALL),
        (r'QPI', re.DOTALL),
        (r'Quickpath', re.IGNORECASE | re.DOTALL),
        (r'IPIs?\b', re.DOTALL),
        (r'CAKE', re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
    ],
    'regexes_to_highlight': [],
},
    'trg_EXT_iom': {
    'question': 'Does triggering relate to IOMMU?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'IOMMU', re.DOTALL),
    ],
    'regexes_and_flags_prompt': [],
    'regexes_to_highlight': [],
},
    'trg_EXT_pci': {
    'question': 'Does triggering require a PCI signal?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'\bPCIe?', re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_EXT_ram': {
    'question': 'Does triggering require specific DRAM configurations or operations?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'memory.*rank', re.IGNORECASE | re.DOTALL),
        (r'memory.*bank', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'DDR', re.DOTALL),
        (r'DRAM', re.DOTALL),
        (r'DIMM', re.DOTALL),
        (r'memory\s*controller', re.DOTALL),
        (r'self.*refresh', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_EXT_rst': {
    'question': 'Does triggering require a reset signal?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        # Cannot put any here, because reset could be an observable effect!
    ],
    'regexes_and_flags_prompt': [
        (r'\breset', re.IGNORECASE | re.DOTALL),
        (r'\bRST\b', re.DOTALL),
        (r'PWROK', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_EXT_usb': {
    'question': 'Does triggering require a USB signal?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\bUSB', re.DOTALL),
        (r'\bType\s*-?\s*[A-Z]', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
    ],
    'regexes_to_highlight': [],
},
    'trg_FEA_cid': {
    'question': 'Does triggering require using CPUID or similar identification attempts?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'cpuid', re.IGNORECASE | re.DOTALL),
        (r'brand', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_FEA_cus': {
    'question': 'Does triggering require using custom extensions such as SSE or MMX?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\bTAA', re.DOTALL),
        (r'PEBS', re.DOTALL),
        (r'VGATHER', re.DOTALL),
        (r'VMASKMOV', re.DOTALL),
        (r'DDPS', re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'extension', re.IGNORECASE | re.DOTALL),
        (r'vector', re.IGNORECASE | re.DOTALL),
        (r'SSE', re.DOTALL),
        (r'MPX', re.DOTALL),
        (r'TAA', re.DOTALL),
        (r'TSX', re.DOTALL),
        (r'RTM', re.DOTALL),
        (r'AVX', re.DOTALL),
        (r'SGX', re.DOTALL),
        (r'MMX', re.DOTALL),
        (r'VMX', re.DOTALL),
        (r'SVM', re.DOTALL),
        (r'PAE', re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_FEA_dbg': {
    'question': 'Does triggering require debug features such as breakpoints?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'debug', re.IGNORECASE | re.DOTALL),
        (r'breakpoint', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'DBG', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_FEA_fpu': {
    'question': 'Does triggering require executing floating point instructions?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'fxsave', re.IGNORECASE | re.DOTALL),
        (r'fxrst', re.IGNORECASE | re.DOTALL),
        (r'x87', re.IGNORECASE | re.DOTALL),
        (r'FPU', re.IGNORECASE | re.DOTALL),
        (r'floating', re.IGNORECASE | re.DOTALL),
        (r'FERR', re.IGNORECASE | re.DOTALL),
        (r'FCMOV', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'multiplication', re.IGNORECASE | re.DOTALL),
        (r'multiply', re.IGNORECASE | re.DOTALL),
        (r'division', re.IGNORECASE | re.DOTALL),
        (r'divide', re.IGNORECASE | re.DOTALL),
        (r'\bconver', re.IGNORECASE | re.DOTALL),
        (r'FP', re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_FEA_mon': {
    'question': 'Does triggering require executing floating point instructions?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\bMONITOR\b', re.DOTALL),
        (r'\bMWAIT\b', re.DOTALL),
    ],
    'regexes_and_flags_prompt': [],
    'regexes_to_highlight': [],
},
    'trg_FEA_tra': {
    'question': 'Does triggering require using custom extensions such as SSE or MMX?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\bRecord\b', re.DOTALL),
        (r'\bTrace\b', re.IGNORECASE | re.DOTALL),
        (r'\bPT\b', re.IGNORECASE | re.DOTALL),
        (r'\bTracing\b', re.IGNORECASE | re.DOTALL),
        (r'LBR', re.DOTALL),
        (r'BTS', re.DOTALL),
        (r'BTM', re.DOTALL),
    ],
    'regexes_and_flags_prompt': [],
    'regexes_to_highlight': [],
},
    'trg_FLT_mca': {
    'question': 'Does triggering require a machine check error?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'\bmachine\s*check', re.IGNORECASE | re.DOTALL),
        (r'\bMCA', re.DOTALL),
        (r'\berror', re.DOTALL),
        (r'\bparity', re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_FLT_ovf': {
    'question': 'Does triggering require a counter overflow or reaching a certain value?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'overflow', re.IGNORECASE | re.DOTALL),
        (r'expir', re.IGNORECASE | re.DOTALL),
        (r'reach', re.IGNORECASE | re.DOTALL),
        (r'\breach.*zero\b', re.IGNORECASE | re.DOTALL),
        (r'\btransition.*zero\b', re.IGNORECASE | re.DOTALL),
        (r'\breach.*0\b', re.IGNORECASE | re.DOTALL),
        (r'\btransition.*0\b', re.IGNORECASE | re.DOTALL),
        (r'\btime.*out\b', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_FLT_swf': {
    'question': 'Does triggering require an illegal instruction?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'page(?:\s*-?table)?\s*-?\s*fault', re.IGNORECASE | re.DOTALL),
        (r'\bPF\b', re.IGNORECASE | re.DOTALL),
        (r'\billegal', re.IGNORECASE | re.DOTALL),
        (r'\bexception', re.IGNORECASE | re.DOTALL),
        (r'\btrap', re.IGNORECASE | re.DOTALL),
        (r'\bfault', re.IGNORECASE | re.DOTALL),
        (r'\bfail', re.IGNORECASE | re.DOTALL),
        (r'\bopcode', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [
        (r'IOMMU'),
        (r'\bmachine\s*check'),
        (r'\bMCA'),
        (r'\bparity'),
        (r'DRAM'),
        (r'DIMM'),
        (r'Protection'),
        (r'\bGP\b'),
        (r'\bbit\b'),
        (r'General'),
    ],
},
    'trg_FLT_tmr': {
    'question': 'Does triggering require a counter overflow?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'timer.*interrupt', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'timer', re.IGNORECASE | re.DOTALL),
        (r'transitions?\s*to\s*(?:zero|0)', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_MBR_cbr': {
    'question': 'Does triggering require conditions on crossing/touching cache line boundaries?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'cache.*\bmisalign', re.IGNORECASE | re.DOTALL),
        (r'\bmisalign.*cache', re.IGNORECASE | re.DOTALL),
        (r'cross.*cache', re.IGNORECASE | re.DOTALL),
        (r'cache.*cross', re.IGNORECASE | re.DOTALL),
        (r'cache.*straddle', re.IGNORECASE | re.DOTALL),
        (r'straddle.*cache', re.IGNORECASE | re.DOTALL),
        (r'\bboundar.*cache', re.IGNORECASE | re.DOTALL),
        (r'cache.*\bboundar', re.IGNORECASE | re.DOTALL),
        (r'misalign.*load', re.IGNORECASE | re.DOTALL),
        (r'load.*misalign', re.IGNORECASE | re.DOTALL),
        (r'misalign.*store', re.IGNORECASE | re.DOTALL),
        (r'store.*misalign', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_MBR_mbr': {
    'question': 'Does triggering require conditions on memory map boundaries?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\bcanonic', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'\d\s*\bg(?:\b.*\bb)?\b', re.IGNORECASE | re.DOTALL),
        (r'\d\s*\bm(?:\b.*\bb)?\b', re.IGNORECASE | re.DOTALL),
        (r'\bboundar', re.IGNORECASE | re.DOTALL),
        (r'\blimit', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_MBR_pbr': {
    'question': 'Does triggering require conditions on crossing/touching page boundaries?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'page.*misalign', re.IGNORECASE | re.DOTALL),
        (r'page.*cross', re.IGNORECASE | re.DOTALL),
        (r'page.*straddle', re.IGNORECASE | re.DOTALL),
        (r'page.*boundar', re.IGNORECASE | re.DOTALL),
        (r'page.*split', re.IGNORECASE | re.DOTALL),
        (r'page.*\bedge', re.IGNORECASE | re.DOTALL),
        (r'4\s*k(?:\s*\bb)?\b.*misalign', re.IGNORECASE | re.DOTALL),
        (r'4\s*k(?:\s*\bb)?\b.*cross', re.IGNORECASE | re.DOTALL),
        (r'4\s*k(?:\s*\bb)?\b.*straddle', re.IGNORECASE | re.DOTALL),
        (r'4\s*k(?:\s*\bb)?\b.*boundar', re.IGNORECASE | re.DOTALL),
        (r'4\s*k(?:\s*\bb)?\b.*\bedge', re.IGNORECASE | re.DOTALL),

        (r'misalign.*page', re.IGNORECASE | re.DOTALL),
        (r'cross.*page', re.IGNORECASE | re.DOTALL),
        (r'straddle.*page', re.IGNORECASE | re.DOTALL),
        (r'boundar.*page', re.IGNORECASE | re.DOTALL),
        (r'\bedge.*page', re.IGNORECASE | re.DOTALL),
        (r'misalign.*4\s*k(?:\s*\bb)?\b', re.IGNORECASE | re.DOTALL),
        (r'cross.*4\s*k(?:\s*\bb)?\b', re.IGNORECASE | re.DOTALL),
        (r'straddle.*4\s*k(?:\s*\bb)?\b', re.IGNORECASE | re.DOTALL),
        (r'boundar.*4\s*k(?:\s*\bb)?\b', re.IGNORECASE | re.DOTALL),
        (r'\.*4\s*k(?:\s*\bb)?\bbedge', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_MOP_atp': {
    'question': 'Does triggering require a memory operation involving an atomic/synchronization operation?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\bato', re.IGNORECASE | re.DOTALL),
        (r'read.*mod.*writ', re.IGNORECASE | re.DOTALL),
        (r'transactional', re.IGNORECASE | re.DOTALL),
        (r'atomic', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'TSX', re.DOTALL),
        (r'TLP', re.DOTALL),
        (r'\block', re.IGNORECASE | re.DOTALL),
        (r'acquir', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_MOP_cam': {
    'question': 'Does triggering require a cache miss?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [
        (r'TLB', re.DOTALL),
    ],
    'regexes_and_flags_certain': [
        (r'cache\s*-?\s*miss', re.IGNORECASE | re.DOTALL),
        (r'miss.*cache', re.IGNORECASE | re.DOTALL),
        (r'L\d\s*-?\s*miss', re.IGNORECASE | re.DOTALL)
    ],
    'regexes_and_flags_prompt': [
        (r'\bmiss(?:es)\b', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_MOP_fen': {
    'question': 'Does triggering require a memory operation involving a fence or a serialization?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'fenc', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'cpuid', re.IGNORECASE | re.DOTALL),
        (r'\bserial', re.IGNORECASE | re.DOTALL),
        (r'\brdtscp', re.IGNORECASE | re.DOTALL),
        (r'time\s*stamp', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_MOP_flc': {
    'question': 'Does triggering require a cache or TLB flushing operation?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [
        # Corresponds to AMD bug 312 which is not triggered by flush.
        (r'flush\s*to\s*zero', re.IGNORECASE | re.DOTALL)
    ],
    'regexes_and_flags_certain': [
        (r'CLFLUSH', re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'flush', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_MOP_mmp': {
    'question': 'Does triggering require a memory operation involving a memory-mapped element?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'cachea', re.IGNORECASE | re.DOTALL),
        (r'memory\s*-?\s*map', re.IGNORECASE | re.DOTALL),
        (r'memory\s*-?\s*area', re.IGNORECASE | re.DOTALL),
        (r'\bMMIO', re.DOTALL),
        (r'\bLVT', re.DOTALL),
        (r'\bAVIC', re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'apic', re.IGNORECASE | re.DOTALL),
        (r'\baccess', re.IGNORECASE | re.DOTALL),
        (r'\bmap', re.IGNORECASE | re.DOTALL),
        (r'\bWC', re.DOTALL),
        (r'\bregion', re.IGNORECASE | re.DOTALL),
        (r'I\s*/\s*O\s*address', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_MOP_nst': {
    'question': 'Does triggering require a transition on nested page tables?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\bnested', re.IGNORECASE | re.DOTALL),
        (r'\bnesting', re.IGNORECASE | re.DOTALL),
        (r'\bslat', re.IGNORECASE | re.DOTALL),
        (r'\bept', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'\bnest', re.IGNORECASE | re.DOTALL),
        (r'\bmulti.*level', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_MOP_ptw': {
    'question': 'Does triggering require a page table walk?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [
        (r'iommu', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_certain': [
        # Cannot put any here, because ptw could be an observable effect!
    ],
    'regexes_and_flags_prompt': [
        (r'ptw', re.IGNORECASE | re.DOTALL),
        (r'page(?:\s*-?\s*table)?\s*-?\s*walk', re.IGNORECASE | re.DOTALL),
        (r'tlb\s*miss', re.IGNORECASE | re.DOTALL),
        (r'\bwalk', re.IGNORECASE | re.DOTALL),
        (r'\bpage\s*fault', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [],
},
    'trg_MOP_seg': {
    'question': 'Does triggering require a memory operation involving segment conditions?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'\bCS\b', re.DOTALL),
        (r'\bDS\b', re.DOTALL),
        (r'\bES\b', re.DOTALL),
        (r'\bFS\b', re.DOTALL),
        (r'\bGS\b', re.DOTALL),
        (r'\bSS\b', re.DOTALL),
        (r'\bLSL\b', re.DOTALL),
        (r'\bTSS\b', re.DOTALL),
        (r'\bsegments?\b', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
    ],
    'regexes_to_highlight': [],
},
    'trg_MOP_spe': {
    'question': 'Does triggering require a memory operation involving segment conditions?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'specul', re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
    ],
    'regexes_to_highlight': [],
},
    'trg_POW_pwc': {
    'question': 'Does triggering require a transition between power modes (or MWAIT)?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [],
    'regexes_and_flags_prompt': [
        (r'\bP\s*-?\s*state', re.IGNORECASE | re.DOTALL),
        (r'\bC\s*-?\s*state', re.IGNORECASE | re.DOTALL),
        (r'\s*\bC\s*\d', re.IGNORECASE | re.DOTALL),
        (r'C\s*C\s*\d', re.DOTALL),
        (r'core\s*(?:state)?\s*C\s*\d', re.IGNORECASE | re.DOTALL),
        (r'core\s*state', re.IGNORECASE | re.DOTALL),
        (r'\b[C-KM-Z][0-9]\b', re.IGNORECASE | re.DOTALL),
        (r'\bU?MWAIT', re.IGNORECASE | re.DOTALL),
        (r'sleep', re.IGNORECASE | re.DOTALL),
        (r'wake', re.IGNORECASE | re.DOTALL),
        (r'transition', re.IGNORECASE | re.DOTALL),
        (r'deep', re.IGNORECASE | re.DOTALL),
        (r'exit', re.IGNORECASE | re.DOTALL),
        (r'resum', re.IGNORECASE | re.DOTALL),
        (r'entry', re.IGNORECASE | re.DOTALL),
        (r'entering', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [r'\benter\w*', r'\bentr\w*', r'\bresum\w*', r'\bchang\w*', r'\bexit\w*', r'transit\w*', r'\bto\b', r'\bfrom\b', r'\bwak', r'packag', r'pkg', r'turbo'],
},
    'trg_POW_tht': {
    'question': 'Does triggering require performance throttling due to temperature or such conditions?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'temperature.*delta', re.IGNORECASE | re.DOTALL),
        (r'temperature.*difference', re.IGNORECASE | re.DOTALL),
        (r'frequenc', re.IGNORECASE | re.DOTALL),
        (r'PROCHOT', re.IGNORECASE | re.DOTALL),
        (r'volt', re.IGNORECASE | re.DOTALL),
        (r'power', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'throttl', re.IGNORECASE | re.DOTALL),
        (r'temperature.*chang', re.IGNORECASE | re.DOTALL),
        (r'chang.*temperature', re.IGNORECASE | re.DOTALL),
        (r'\bvari.*temperature', re.IGNORECASE | re.DOTALL),
        (r'temperature.*\bvari', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_to_highlight': [r'\benter\w*', r'\bentr\w*', r'\bresum\w*', r'\bchang\w*', r'\bexit\w*', r'transit\w*', r'\bto\b', r'\bfrom\b', r'\bwak', r'\bthrottl'],
},
    'trg_PRV_ret': {
    'question': 'Does triggering require transitioning back from SMM?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [],
    'regexes_and_flags_certain': [
        (r'RSM', re.DOTALL),
        (r'resum\w*\s*from\s*SMM', re.IGNORECASE | re.DOTALL),
        (r'exit\w*\s*from\s*SMM', re.IGNORECASE | re.DOTALL),
        (r'\bSMM\s*resum', re.IGNORECASE | re.DOTALL),
        (r'\bSMM\s*exit', re.IGNORECASE | re.DOTALL),
        (r'IRET', re.DOTALL),
        (r'SYSRET', re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'SMM', re.DOTALL)
    ],
    'regexes_to_highlight': [r'\w*exit\w*', r'\w*resum\w*'],
},
    'trg_PRV_vmt': {
    'question': 'Does triggering require transitioning between VM host and guest?',
    'regexes_and_flags_require': [],
    'regexes_and_flags_exclude': [
        (r'IOMMU', re.IGNORECASE | re.DOTALL),
    ],
    'regexes_and_flags_certain': [
        (r'VMRUN', re.DOTALL),
        (r'VMLOAD', re.DOTALL),
        (r'VMSAVE', re.DOTALL),
        (r'VM\s*-?\s*exit', re.DOTALL),
        (r'VM\s*-?\s*entr', re.DOTALL),
    ],
    'regexes_and_flags_prompt': [
        (r'guest', re.IGNORECASE | re.DOTALL),
        (r'hypervisor', re.IGNORECASE | re.DOTALL),
        (r'VMM', re.DOTALL),
        (r'VMCS', re.DOTALL),
        (r'exit.*VM', re.IGNORECASE | re.DOTALL),
        (r'enter.*VM', re.IGNORECASE | re.DOTALL),
        (r'VM.*exit', re.IGNORECASE | re.DOTALL),
        (r'VM.*enter', re.IGNORECASE | re.DOTALL),
        (r'VM.*resume', re.IGNORECASE | re.DOTALL),
        (r'resume.*VM', re.IGNORECASE | re.DOTALL),
        (r'VM.*return', re.IGNORECASE | re.DOTALL),
        (r'return.*VM', re.IGNORECASE | re.DOTALL),
        (r'\bVM\b', re.DOTALL),
        (r'\bVMX\b', re.DOTALL),
    ],
    'regexes_to_highlight': [r'exit', r'resum', r'return', r'enter', r'transit'],
},
}
